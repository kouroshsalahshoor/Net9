@page "/wasm/people"
@rendermode InteractiveAuto

<h5 class="bg-primary text-white text-center p-2">People (WebAssembly)</h5>
<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Dept</th>
            <th>Location</th>
            <th class="text-center">
                <NavLink class="btn btn-sm btn-primary" href="wasm/person/create">Create</NavLink>
            </th>
        </tr>
    </thead>
    <tbody>
        @if (People.Count() == 0)
        {
            <tr><th colspan="5" class="p-4 text-center">Loading Data...</th></tr>
        }
        else
        {
            @foreach (Person p in People)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Surname, @p.Firstname</td>
                    <td>@p.Department?.Name</td>
                    <td>@p.Location?.City</td>
                    <td class="text-center">
                        <NavLink class="btn btn-sm btn-info" href="@GetDetailsUrl(p.Id)">
                            Details
                        </NavLink>
                        <NavLink class="btn btn-sm btn-warning" href="@GetEditUrl(p.Id)">
                            Edit
                        </NavLink>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => HandleDelete(p))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
@code {
    [Inject]
    public HttpClient? Http { get; set; }
    public Person[] People { get; set; } = Array.Empty<Person>();
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }
    private async Task UpdateData()
    {
        if (Http != null)
        {
            People = await Http.GetFromJsonAsync<Person[]>("people") ?? Array.Empty<Person>();
        }
    }
    string GetEditUrl(long id) => $"wasm/person/update/{id}";
    string GetDetailsUrl(long id) => $"wasm/person/{id}";
    public async Task HandleDelete(Person p)
    {
        if (await _js.InvokeAsync<bool>("confirm", Constants.DeleteText))
        {
            if (Http != null)
            {
                HttpResponseMessage resp = await Http.DeleteAsync($"people/{p.Id}");
                if (resp.IsSuccessStatusCode)
                {
                    await UpdateData();
                }
            }
        }
    }
}