@page "/category/create"
@page "/category/update/{id:int}"

@* @attribute [Authorize] *@
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>@_title</PageTitle>
@* <h3 class="text-center p-1 text-light bg-@(Id == 0 ? "primary" : "warning")">@_title</h3> *@
<h2>@_title</h2>
<hr />

@if (_model is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="_model" OnValidSubmit="submit" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                @if (_errors.Any())
                {
                    <ul class="text-danger">
                        @foreach (var error in _errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }

                <div class="form-floating mb-3">
                    <InputText id="name" @bind-Value="_model.Name" class="form-control" placeholder="" />
                    <label for="name">Name</label>
                    <ValidationMessage For="() => _model.Name" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
                <a class="btn btn-light" href="/categories">Back to List</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    [SupplyParameterFromForm]
    private Category? _model { get; set; } = new();

    private string _title = default!;
    private List<string> _errors = new();

    protected override async Task OnParametersSetAsync()
    {
        _title = Id == 0 ? "Create" : "Update";

        if (Id > 0)
        {
            using var db = _dbFactory.CreateDbContext();
            _model = await db.Categories.FirstOrDefaultAsync(m => m.Id == Id);

            if (_model is null)
            {
                _navigationManager.NavigateTo("notfound");
            }
        }
        // return base.OnParametersSetAsync();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task submit()
    {
        _errors.Clear();

        using var db = _dbFactory.CreateDbContext();

        if (await db.Categories.AnyAsync(x => x.Name == _model!.Name && x.Id != _model.Id))
        {
            _errors.Add("Another item with same name already exists");
            return;
        }

        if (Id == 0)
        {
            db.Categories.Add(_model!);
        }
        else
        {
            db.Attach(_model!).State = EntityState.Modified;
        }

        try
        {
            await db.SaveChangesAsync();
            _navigationManager.NavigateTo("/categories");
        }
        catch (DbUpdateConcurrencyException e)
        {
            if (!CategoryExists(_model!.Id))
            {
                _navigationManager.NavigateTo("notfound");
            }
            else
            {
                _errors.Add(e.Message);
                // throw;
            }
        }

    }

    private bool CategoryExists(int id)
    {
        using var db = _dbFactory.CreateDbContext();
        return db.Categories.Any(e => e.Id == id);
    }
}
