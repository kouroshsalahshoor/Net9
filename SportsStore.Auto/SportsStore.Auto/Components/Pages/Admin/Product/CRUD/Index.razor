@page "/xadmin/products"
@page "/xadmin"
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>@_title</PageTitle>
<h2>@_title</h2>
<hr />

<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Price</th>
            <th>Image</th>
            <td class="text-center">
                <NavLink class="btn btn-sm btn-primary" href="/admin/product/create" title="Create"><i class="bi bi-plus-square"></i></NavLink>
            </td>
        </tr>
    </thead>
    <tbody>
        @if (_items.Any())
        {
            @foreach (var item in _items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Category</td>
                    <td>@item.Price.ToString("c")</td>
                    <td>@item.ImageUrl</td>
                    <td class="text-center zero_width">
                        <NavLink class="btn btn-info btn-sm" href="@($"/admin/product/{item.Id}")" title="Details"><i class="bi bi-info-square"></i></NavLink>
                        <NavLink class="btn btn-warning btn-sm" href="@($"/admin/product/update/{item.Id}")" title="Update"><i class="bi bi-pencil-square"></i></NavLink>
                        <button class="btn btn-danger btn-sm" @onclick="@(e => delete(item))" title="Delete"><i class="bi bi-trash"></i></button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center">No Products</td>
            </tr>
        }
    </tbody>
</table>
<NavLink class="btn btn-primary" href="/admin/product/create">Create</NavLink>
@code {
    private ApplicationDbContext _db => Service;
    
    private string _title = "Products";
    private IEnumerable<Product> _items { get; set; } = Enumerable.Empty<Product>();

    protected async override Task OnInitializedAsync()
    {
        await load();
    }
    private async Task load()
    {
        _items = await _db.Products.ToListAsync();
    }
    private async Task delete(Product p)
    {
        if (await _js.InvokeAsync<bool>("confirm", Constants.DeleteText))
        {
            _db.Products.Remove(p);
            await _db.SaveChangesAsync();
            await load();
        }
    }
    public string GetDetailsUrl(long id) => $"/admin/product/{id}";
    public string GetUpdateUrl(long id) => $"/admin/product/update/{id}";
}