@page "/admin/users"
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> _userManager
@attribute [Authorize]

<PageTitle>@_title</PageTitle>
<h3 class="bg-primary text-white text-center p-2">@_title</h3>

<table class="table table-sm table-bordered">
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Email</th>
        <th>Roles</th>
        <th class="text-center">
            <a class="btn btn-sm btn-primary" href="admin/user/create">Create</a>
        </th>
    </tr>
    @if (_vms.Count() == 0)
    {
        <tr><td colspan="5" class="text-center">No User Accounts</td></tr>
    }
    else
    {
        foreach (var vm in _vms ?? Enumerable.Empty<UserVM>())
        {
            <tr>
                <td>@vm.User.Id</td>
                <td>@vm.User.UserName</td>
                <td>@vm.User.Email</td>
                <td>@vm.Role</td>
                <td class="text-center">
                    <a class="btn btn-sm btn-warning" href="admin/user/update/@vm.User.Id">Update</a>
                    <button class="btn btn-sm btn-danger" @onclick="@(async ()=> await delete(vm.User))">
                        Delete
                    </button>
                </td>
            </tr>
        }
    }
</table>

@code {
    private string _title = "Users";
    private List<UserVM> _vms { get; set; } = new ();
    // public IEnumerable<ApplicationUser> _users { get; set; } = Enumerable.Empty<ApplicationUser>();

    override protected async Task OnInitializedAsync()
    {
        await load();
    }

    private async Task load(){
        _vms = new();
        foreach (var user in await _userManager.Users.ToListAsync())
        {
            _vms.Add(new UserVM
                {
                    User = user,
                    Role = await getRoles(user)
                });
        }
        // _users = await _userManager.Users.ToListAsync();
    }

    private async Task delete(ApplicationUser user)
    {
        await _userManager.DeleteAsync(user);
        await load();
    }

    private async Task<string> getRoles(ApplicationUser user)
    {
        var roles = await _userManager.GetRolesAsync(user);
        return string.Join(", ", roles.ToList());
    }

    private class UserVM
    {
        public ApplicationUser User { get; set; } = new();
        public string Role { get; set; } = string.Empty;
    }
}
