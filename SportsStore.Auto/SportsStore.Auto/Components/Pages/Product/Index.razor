@page "/products"
@page "/products/page/{page:int}"
@page "/products/{category}"
@page "/products/{category}/page/{page:int}"

<PageTitle>@_title</PageTitle>

<div class="text-center">
    <div class="btn-group" role="group">
        <a class="btn btn-@((string.IsNullOrEmpty(Category)) ? "primary" : "outline-primary")" href="products">All</a>
        @foreach (var item in _categories ?? Enumerable.Empty<string>())
        {
            <a class="btn btn-@((item == Category) ? "primary" : "outline-primary")" href="products/@item">@item</a>
        }
    </div>
</div>

@foreach (var item in _items ?? Enumerable.Empty<Product>())
{
    <div class="card card-outline-primary m-1 p-1">
        <div class="bg-faded p-1">
            <h4>
                @item.Name
                <span class="badge rounded-pill bg-primary text-white" style="float:right">
                    <small>@item.Price.ToString("c")</small>
                </span>
            </h4>
        </div>
        <div class="card-text p-1">
            @item.Description
            <span class="badge text-bg-light" style="float:right">
                <small>@item.Category</small>
            </span>
        </div>
    </div>
}

<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        <li class="page-item disabled">
            <a class="page-link" href="#" aria-label="First">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item">
            <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&lsaquo;</span>
            </a>
        </li>
        <li class="page-item active"><a class="page-link" href="#">1</a></li>
        <li class="page-item"><a class="page-link" href="#">2</a></li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
        <li class="page-item">
            <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&rsaquo;</span>
            </a>
        </li>
        <li class="page-item">
            <a class="page-link" href="#" aria-label="Last">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

@code {
    [Parameter] public int Page { get; set; } = 1;
    [Parameter] public string? Category { get; set; }

    private string _title = "Products";
    private IEnumerable<Product>? _items { get; set; }
    private IEnumerable<string>? _categories { get; set; }

    // private string? _category;

    private int _pageSize = 4;
    private int _page = 1;
    private int _total = 0;


    // public class PagingInfo
    // {
    //     public int TotalItems { get; set; }
    //     public int ItemsPerPage { get; set; }
    //     public int CurrentPage { get; set; }
    //     public int TotalPages =>
    //     (int)Math.Ceiling((decimal)TotalItems / ItemsPerPage);
    // }

    protected override async Task OnInitializedAsync()
    {
        _total = await _efStoreRepository.Products.CountAsync();
        _categories = await _efStoreRepository.Products.Select(p => p.Category).Distinct().ToListAsync();
    }
    override protected async Task OnParametersSetAsync()
    {
        _page = Page < 1 ? 1 : Page;

        // _total = await _efStoreRepository.Products.CountAsync();
        // _categories = await _efStoreRepository.Products.Select(p => p.Category).Distinct().ToListAsync();

        _items = await _efStoreRepository.Products
        .Where(p => Category == null || p.Category == Category)
        .OrderBy(p => p.Id).Skip((_page - 1) * _pageSize).Take(_pageSize).ToListAsync();
    }
}
