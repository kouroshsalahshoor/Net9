@page "/products"
@page "/products/page/{page:int}"
@page "/products/{category}"
@page "/products/{category}/page/{page:int}"

@* click did not work without it!!! *@
@rendermode InteractiveServer

@implements IDisposable

<PageTitle>@_title</PageTitle>

<div class="text-center">
    <div class="btn-group" role="group">
        <a class="btn btn-@((string.IsNullOrEmpty(Category)) ? "primary" : "outline-primary")" href="products">All</a>
        @foreach (var item in _categories ?? Enumerable.Empty<string>())
        {
            <a class="btn btn-@((item == Category) ? "primary" : "outline-primary")" href="products/@item">@item</a>
        }
    </div>
</div>

@foreach (var item in _items ?? Enumerable.Empty<Product>())
{
    <div class="card card-outline-primary m-1 p-1">
        <div class="bg-faded p-1">
            <h4>
                @item.Name
                <span class="badge rounded-pill text-bg-info">
                    <small>@item.Category</small>
                </span>
                <span class="badge rounded-pill bg-primary text-white float-end">
                    <small>@item.Price.ToString("c")</small>
                </span>
            </h4>
        </div>
        <div class="card-text p-1">
            @item.Description
            <button class="btn btn-success btn-sm float-end" @onclick="@(async() => await addToCart(item))">
                Add To Cart
            </button>
        </div>
    </div>
}

<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        <li class="page-item @(_page <=1 ? "disabled" : "")">
            <a class="page-link" href="@($"{_url}/page/1")" aria-label="First">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item @(_page <=1 ? "disabled" : "")">
            <a class="page-link" href="@($"{_url}/page/{(_page-1)}")" aria-label="Previous">
                <span aria-hidden="true">&lsaquo;</span>
            </a>
        </li>
        @for (int i = 1; i <= _pages; i++)
        {
            <li class="page-item @(i==_page ? "active" : "")"><a class="page-link" href="@($"{_url}/page/{@i}")">@i</a></li>
        }
        <li class="page-item @(_page >= _pages ? "disabled" : "")">
            <a class="page-link" href="@($"{_url}/page/{(_page+1)}")" aria-label="Next">
                <span aria-hidden="true">&rsaquo;</span>
            </a>
        </li>
        <li class="page-item @(_page >= _pages ? "disabled" : "")">
            <a class="page-link" href="@($"{_url}/page/{@_pages}")" aria-label="Last">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

@code {
    [Parameter] public int Page { get; set; } = 1;
    [Parameter] public string? Category { get; set; }

    private string _title = "Products";
    private IEnumerable<Product>? _items { get; set; }
    private IEnumerable<string>? _categories { get; set; }

    private int _pageSize = 3;
    private int _page = 1;
    private int _total = 0;
    private int _pages = 0;

    private string _url = "products";

    // private bool _connected = false;
    // private Cart? _cart { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _categories = await _efStoreRepository.Products.Select(p => p.Category).Distinct().ToListAsync();

        _cartService.OnChange += StateHasChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // _connected = true;
            await _cartService.Load();
            StateHasChanged();
        }
    }

    override protected async Task OnParametersSetAsync()
    {
        _page = Page < 1 ? 1 : Page;

        _url = string.IsNullOrEmpty(Category) ? "products" : $"products/{Category}";

        var query = _efStoreRepository.Products.Where(p => Category == null || p.Category == Category);
        _total = await query.CountAsync();
        _pages = (int)Math.Ceiling((decimal)_total / _pageSize);
        _items = await query.OrderBy(p => p.Id).Skip((_page - 1) * _pageSize).Take(_pageSize).ToListAsync();
    }

    private async Task addToCart(Product product)
    {
        if (product != null)
        {
            await _cartService!.AddItem(product, 1);
            await _protectedLocalStorage.SetAsync("cart", _cartService.Lines);
            _navigationManager.NavigateTo($"cart?returnUrl={_navigationManager.ToBaseRelativePath(_navigationManager.Uri)}");
        }
    }

    public void Dispose()
    {
        _cartService.OnChange -= StateHasChanged;
    }
}
